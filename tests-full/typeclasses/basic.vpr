// compile: {vprc} {input} -l -a -c
// link: {cc} {input}.o {runtime} -o {input}.bin
// run: {input}.bin 5

module test
{
    typeclass algorithm(arithmetic : type)
    {
        function calculate(arg : arithmetic) -> arithmetic;
    };

    let int32 = sized_int(32);

    let factorial = instance algorithm(int32)
    {
        function calculate(arg)
        {
            if (arg == 1)
            {
                // TODO: allow this conversion from int to int32 to work in the return context
                // return 1;
                return arg;
            }

            return arg * calculate(arg - 1);
        }
    };

    let entry = Î»(arg : int32) -> int32
    {
        let constant_foldable = factorial.calculate(5);
        let non_constant_foldable = factorial.calculate(arg);

        return constant_foldable - non_constant_foldable;
    };
}

// vim: filetype=cpp
